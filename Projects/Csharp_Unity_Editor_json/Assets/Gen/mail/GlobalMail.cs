//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace editor.cfg.mail
{

public sealed partial class GlobalMail :  Bright.Config.EditorBeanBase 
{
    public GlobalMail()
    {
            Title = "";
            Sender = "";
            Content = "";
            Award = new System.Collections.Generic.List<int>();
            ServerList = new System.Collections.Generic.List<int>();
            Platform = "";
            Channel = "";
            MinMaxLevel = new condition.MinMaxLevel();
            RegisterTime = new condition.TimeRange();
            MailTime = new condition.TimeRange();
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  Id = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["title"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  Title = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["sender"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  Sender = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["content"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  Content = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["award"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } Award = new System.Collections.Generic.List<int>(); foreach(JSONNode __e in _fieldJson.Children) { int __v;  if(!__e.IsNumber) { throw new SerializationException(); }  __v = __e;  Award.Add(__v); }  
            }
        }
        
        { 
            var _fieldJson = _json["all_server"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsBoolean) { throw new SerializationException(); }  AllServer = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["server_list"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } ServerList = new System.Collections.Generic.List<int>(); foreach(JSONNode __e in _fieldJson.Children) { int __v;  if(!__e.IsNumber) { throw new SerializationException(); }  __v = __e;  ServerList.Add(__v); }  
            }
        }
        
        { 
            var _fieldJson = _json["platform"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  Platform = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["channel"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  Channel = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["min_max_level"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsObject) { throw new SerializationException(); }  MinMaxLevel = condition.MinMaxLevel.LoadJsonMinMaxLevel(_fieldJson);
            }
        }
        
        { 
            var _fieldJson = _json["register_time"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsObject) { throw new SerializationException(); }  RegisterTime = condition.TimeRange.LoadJsonTimeRange(_fieldJson);
            }
        }
        
        { 
            var _fieldJson = _json["mail_time"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsObject) { throw new SerializationException(); }  MailTime = condition.TimeRange.LoadJsonTimeRange(_fieldJson);
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        _json["$type"] = "mail.GlobalMail";
        {
            _json["id"] = new JSONNumber(Id);
        }
        {

            if (Title == null) { throw new System.ArgumentNullException(); }
            _json["title"] = new JSONString(Title);
        }
        {

            if (Sender == null) { throw new System.ArgumentNullException(); }
            _json["sender"] = new JSONString(Sender);
        }
        {

            if (Content == null) { throw new System.ArgumentNullException(); }
            _json["content"] = new JSONString(Content);
        }
        {

            if (Award == null) { throw new System.ArgumentNullException(); }
            { var __cjson = new JSONArray(); foreach(var _e in Award) { __cjson["null"] = new JSONNumber(_e); } _json["award"] = __cjson; }
        }
        {
            _json["all_server"] = new JSONBool(AllServer);
        }
        {

            if (ServerList == null) { throw new System.ArgumentNullException(); }
            { var __cjson = new JSONArray(); foreach(var _e in ServerList) { __cjson["null"] = new JSONNumber(_e); } _json["server_list"] = __cjson; }
        }
        {

            if (Platform == null) { throw new System.ArgumentNullException(); }
            _json["platform"] = new JSONString(Platform);
        }
        {

            if (Channel == null) { throw new System.ArgumentNullException(); }
            _json["channel"] = new JSONString(Channel);
        }
        {

            if (MinMaxLevel == null) { throw new System.ArgumentNullException(); }
            { var __bjson = new JSONObject();  condition.MinMaxLevel.SaveJsonMinMaxLevel(MinMaxLevel, __bjson); _json["min_max_level"] = __bjson; }
        }
        {

            if (RegisterTime == null) { throw new System.ArgumentNullException(); }
            { var __bjson = new JSONObject();  condition.TimeRange.SaveJsonTimeRange(RegisterTime, __bjson); _json["register_time"] = __bjson; }
        }
        {

            if (MailTime == null) { throw new System.ArgumentNullException(); }
            { var __bjson = new JSONObject();  condition.TimeRange.SaveJsonTimeRange(MailTime, __bjson); _json["mail_time"] = __bjson; }
        }
    }

    public static GlobalMail LoadJsonGlobalMail(SimpleJSON.JSONNode _json)
    {
        GlobalMail obj = new mail.GlobalMail();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonGlobalMail(GlobalMail _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public int Id { get; set; }

    public string Title { get; set; }

    public string Sender { get; set; }

    public string Content { get; set; }

    public System.Collections.Generic.List<int> Award { get; set; }

    public bool AllServer { get; set; }

    public System.Collections.Generic.List<int> ServerList { get; set; }

    public string Platform { get; set; }

    public string Channel { get; set; }

    public condition.MinMaxLevel MinMaxLevel { get; set; }

    public condition.TimeRange RegisterTime { get; set; }

    public condition.TimeRange MailTime { get; set; }

}
}
