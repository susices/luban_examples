//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace editor.cfg.ai
{

public sealed partial class Blackboard :  Bright.Config.EditorBeanBase 
{
    public Blackboard()
    {
            Name = "";
            Desc = "";
            ParentName = "";
            Keys = new System.Collections.Generic.List<ai.BlackboardKey>();
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["name"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  Name = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["desc"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  Desc = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["parent_name"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  ParentName = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["keys"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } Keys = new System.Collections.Generic.List<ai.BlackboardKey>(); foreach(JSONNode __e in _fieldJson.Children) { ai.BlackboardKey __v;  if(!__e.IsObject) { throw new SerializationException(); }  __v = ai.BlackboardKey.LoadJsonBlackboardKey(__e);  Keys.Add(__v); }  
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        _json["$type"] = "ai.Blackboard";
        {

            if (Name == null) { throw new System.ArgumentNullException(); }
            _json["name"] = new JSONString(Name);
        }
        {

            if (Desc == null) { throw new System.ArgumentNullException(); }
            _json["desc"] = new JSONString(Desc);
        }
        {

            if (ParentName == null) { throw new System.ArgumentNullException(); }
            _json["parent_name"] = new JSONString(ParentName);
        }
        {

            if (Keys == null) { throw new System.ArgumentNullException(); }
            { var __cjson = new JSONArray(); foreach(var _e in Keys) { { var __bjson = new JSONObject();  ai.BlackboardKey.SaveJsonBlackboardKey(_e, __bjson); __cjson["null"] = __bjson; } } _json["keys"] = __cjson; }
        }
    }

    public static Blackboard LoadJsonBlackboard(SimpleJSON.JSONNode _json)
    {
        Blackboard obj = new ai.Blackboard();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonBlackboard(Blackboard _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public string Name { get; set; }

    public string Desc { get; set; }

    public string ParentName { get; set; }

    public System.Collections.Generic.List<ai.BlackboardKey> Keys { get; set; }

}
}
