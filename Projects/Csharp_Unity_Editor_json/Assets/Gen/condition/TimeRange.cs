//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace editor.cfg.condition
{

public sealed partial class TimeRange :  condition.Condition 
{
    public TimeRange()
    {
            DateTimeRange = new common.DateTimeRange();
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["date_time_range"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsObject) { throw new SerializationException(); }  DateTimeRange = common.DateTimeRange.LoadJsonDateTimeRange(_fieldJson);
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        _json["$type"] = "condition.TimeRange";
        {

            if (DateTimeRange == null) { throw new System.ArgumentNullException(); }
            { var __bjson = new JSONObject();  common.DateTimeRange.SaveJsonDateTimeRange(DateTimeRange, __bjson); _json["date_time_range"] = __bjson; }
        }
    }

    public static TimeRange LoadJsonTimeRange(SimpleJSON.JSONNode _json)
    {
        TimeRange obj = new condition.TimeRange();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonTimeRange(TimeRange _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public common.DateTimeRange DateTimeRange { get; set; }

}
}
