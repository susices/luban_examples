//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace editor.cfg.test
{

public sealed partial class TestRow :  Bright.Config.EditorBeanBase 
{
    public TestRow()
    {
            Z = "";
            A = new test.Test3();
            B = new System.Collections.Generic.List<int>();
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["x"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  X = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["y"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsBoolean) { throw new SerializationException(); }  Y = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["z"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  Z = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["a"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsObject) { throw new SerializationException(); }  A = test.Test3.LoadJsonTest3(_fieldJson);
            }
        }
        
        { 
            var _fieldJson = _json["b"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } B = new System.Collections.Generic.List<int>(); foreach(JSONNode __e in _fieldJson.Children) { int __v;  if(!__e.IsNumber) { throw new SerializationException(); }  __v = __e;  B.Add(__v); }  
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        _json["$type"] = "test.TestRow";
        {
            _json["x"] = new JSONNumber(X);
        }
        {
            _json["y"] = new JSONBool(Y);
        }
        {

            if (Z == null) { throw new System.ArgumentNullException(); }
            _json["z"] = new JSONString(Z);
        }
        {

            if (A == null) { throw new System.ArgumentNullException(); }
            { var __bjson = new JSONObject();  test.Test3.SaveJsonTest3(A, __bjson); _json["a"] = __bjson; }
        }
        {

            if (B == null) { throw new System.ArgumentNullException(); }
            { var __cjson = new JSONArray(); foreach(var _e in B) { __cjson["null"] = new JSONNumber(_e); } _json["b"] = __cjson; }
        }
    }

    public static TestRow LoadJsonTestRow(SimpleJSON.JSONNode _json)
    {
        TestRow obj = new test.TestRow();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonTestRow(TestRow _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public int X { get; set; }

    public bool Y { get; set; }

    public string Z { get; set; }

    public test.Test3 A { get; set; }

    public System.Collections.Generic.List<int> B { get; set; }

}
}
