//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace editor.cfg.test
{

public sealed partial class MultiRowType3 :  Bright.Config.EditorBeanBase 
{
    public MultiRowType3()
    {
            Items = new System.Collections.Generic.List<test.MultiRowType1>();
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  Id = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["items"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } Items = new System.Collections.Generic.List<test.MultiRowType1>(); foreach(JSONNode __e in _fieldJson.Children) { test.MultiRowType1 __v;  if(!__e.IsObject) { throw new SerializationException(); }  __v = test.MultiRowType1.LoadJsonMultiRowType1(__e);  Items.Add(__v); }  
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        _json["$type"] = "test.MultiRowType3";
        {
            _json["id"] = new JSONNumber(Id);
        }
        {

            if (Items == null) { throw new System.ArgumentNullException(); }
            { var __cjson = new JSONArray(); foreach(var _e in Items) { { var __bjson = new JSONObject();  test.MultiRowType1.SaveJsonMultiRowType1(_e, __bjson); __cjson["null"] = __bjson; } } _json["items"] = __cjson; }
        }
    }

    public static MultiRowType3 LoadJsonMultiRowType3(SimpleJSON.JSONNode _json)
    {
        MultiRowType3 obj = new test.MultiRowType3();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonMultiRowType3(MultiRowType3 _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public int Id { get; set; }

    public System.Collections.Generic.List<test.MultiRowType1> Items { get; set; }

}
}
