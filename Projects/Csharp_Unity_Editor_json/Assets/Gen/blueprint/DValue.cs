//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace editor.cfg.blueprint
{

public abstract partial class DValue :  Bright.Config.EditorBeanBase 
{
    public DValue()
    {
    }


    public static DValue LoadJsonDValue(SimpleJSON.JSONNode _json)
    {
        string type = _json["$type"];
        DValue obj;
        switch (type)
        {
            case "blueprint.DBool":   
            case "DBool":obj = new blueprint.DBool(); break;
            case "blueprint.DInt":   
            case "DInt":obj = new blueprint.DInt(); break;
            case "blueprint.DLong":   
            case "DLong":obj = new blueprint.DLong(); break;
            case "blueprint.DDouble":   
            case "DDouble":obj = new blueprint.DDouble(); break;
            case "blueprint.DString":   
            case "DString":obj = new blueprint.DString(); break;
            case "blueprint.DObject":   
            case "DObject":obj = new blueprint.DObject(); break;
            case "blueprint.DArray":   
            case "DArray":obj = new blueprint.DArray(); break;
            default: throw new SerializationException();
        }
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonDValue(DValue _obj, SimpleJSON.JSONNode _json)
    {
        _json["$type"] = _obj.GetType().Name;
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

}
}
